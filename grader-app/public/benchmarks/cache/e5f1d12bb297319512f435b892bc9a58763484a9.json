[{"text":"**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 60, right: 30, bottom: 50, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data = data\n        .filter(d => d.symbol === 'AAPL')\n        .map(d => ({\n          date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n          price: +d.price\n        }));\n\n      // Sort by date ascending\n      data.sort((a, b) => a.date - b.date);\n\n      // Define scales\n      const xScale = d3.scaleBand()\n        .domain(data.map(d => d.date))\n        .range([0, width])\n        .padding(0.1);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price) * 1.1]) // add 10% for headroom\n        .nice()\n        .range([height, 0]);\n\n      // Define x-axis as time formatted labels but scaleBand for bars\n      const xTimeScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const xAxis = d3.axisBottom(xTimeScale).ticks(6).tickFormat(d3.timeFormat(\"%b %Y\"));\n      const yAxis = d3.axisLeft(yScale);\n\n      // Append x-axis\n      svg.append(\"g\")\n        .attr(\"class\", \"axis\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(xAxis)\n        .append(\"text\")\n          .attr(\"fill\", \"black\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", 40)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .text(\"Date\");\n\n      // Append y-axis\n      svg.append(\"g\")\n        .attr(\"class\", \"axis\")\n        .call(yAxis)\n        .append(\"text\")\n          .attr(\"fill\", \"black\")\n          .attr(\"transform\", \"rotate(-90)\")\n          .attr(\"y\", -50)\n          .attr(\"x\", -height / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .text(\"Price\");\n\n      // Add title\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", -margin.top/2 + 10)\n        .text(\"AAPL Stock Price Over Time\");\n\n      // Append bars\n      svg.selectAll(\".bar\")\n        .data(data)\n        .join(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", d => xScale(d.date))\n          .attr(\"y\", d => yScale(d.price))\n          .attr(\"width\", xScale.bandwidth())\n          .attr(\"height\", d => height - yScale(d.price));\n\n      // Append labels\n      svg.selectAll(\".bar-label\")\n        .data(data)\n        .join(\"text\")\n          .attr(\"class\", \"bar-label\")\n          .attr(\"x\", d => xScale(d.date) + xScale.bandwidth()/2)\n          .attr(\"y\", d => yScale(d.price) - 5)\n          .text(d => d.price);\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n         .attr(\"x\", width / 2)\n         .attr(\"y\", height / 2)\n         .attr(\"text-anchor\", \"middle\")\n         .text(\"Error loading data.\");\n    });\n  </script>\n</body>\n</html>\n```","message":{"type":"ai","data":{"content":"**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 60, right: 30, bottom: 50, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data = data\n        .filter(d => d.symbol === 'AAPL')\n        .map(d => ({\n          date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n          price: +d.price\n        }));\n\n      // Sort by date ascending\n      data.sort((a, b) => a.date - b.date);\n\n      // Define scales\n      const xScale = d3.scaleBand()\n        .domain(data.map(d => d.date))\n        .range([0, width])\n        .padding(0.1);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price) * 1.1]) // add 10% for headroom\n        .nice()\n        .range([height, 0]);\n\n      // Define x-axis as time formatted labels but scaleBand for bars\n      const xTimeScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const xAxis = d3.axisBottom(xTimeScale).ticks(6).tickFormat(d3.timeFormat(\"%b %Y\"));\n      const yAxis = d3.axisLeft(yScale);\n\n      // Append x-axis\n      svg.append(\"g\")\n        .attr(\"class\", \"axis\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(xAxis)\n        .append(\"text\")\n          .attr(\"fill\", \"black\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", 40)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .text(\"Date\");\n\n      // Append y-axis\n      svg.append(\"g\")\n        .attr(\"class\", \"axis\")\n        .call(yAxis)\n        .append(\"text\")\n          .attr(\"fill\", \"black\")\n          .attr(\"transform\", \"rotate(-90)\")\n          .attr(\"y\", -50)\n          .attr(\"x\", -height / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .text(\"Price\");\n\n      // Add title\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", -margin.top/2 + 10)\n        .text(\"AAPL Stock Price Over Time\");\n\n      // Append bars\n      svg.selectAll(\".bar\")\n        .data(data)\n        .join(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", d => xScale(d.date))\n          .attr(\"y\", d => yScale(d.price))\n          .attr(\"width\", xScale.bandwidth())\n          .attr(\"height\", d => height - yScale(d.price));\n\n      // Append labels\n      svg.selectAll(\".bar-label\")\n        .data(data)\n        .join(\"text\")\n          .attr(\"class\", \"bar-label\")\n          .attr(\"x\", d => xScale(d.date) + xScale.bandwidth()/2)\n          .attr(\"y\", d => yScale(d.price) - 5)\n          .text(d => d.price);\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n         .attr(\"x\", width / 2)\n         .attr(\"y\", height / 2)\n         .attr(\"text-anchor\", \"middle\")\n         .text(\"Error loading data.\");\n    });\n  </script>\n</body>\n</html>\n```","additional_kwargs":{},"response_metadata":{"tokenUsage":{"promptTokens":1279,"completionTokens":1072,"totalTokens":2351},"finish_reason":"stop","model_name":"openrouter/quasar-alpha"},"id":"gen-1743877199-munTGIZJJlAzETrS9wvp","tool_calls":[],"invalid_tool_calls":[],"usage_metadata":{"output_tokens":1072,"input_tokens":1279,"total_tokens":2351,"input_token_details":{"cache_read":0},"output_token_details":{"reasoning":0}}}}}]