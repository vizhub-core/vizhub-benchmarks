[{"text":"Here is the updated code:\n\n**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    /* Add basic CSS styling for the chart, axes, labels, title */\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    // Set up SVG dimensions and margins\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    // Load data from data.csv using d3.csv\n    d3.csv(\"data.csv\").then(data => {\n      console.log(\"Data loaded:\", data); // Log loaded data\n\n      // Parse data (dates and prices)\n      const parsedData = data.map(d => ({ date: new Date(d.date), price: parseFloat(d.price) }));\n\n      // Create scales (X: time, Y: linear)\n      const xScale = d3.scaleTime();\n      const yScale = d3.scaleLinear().domain([d3.min(parsedData, d => d.price), d3.max(parsedData, d => d.price)]).range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n\n      // Create SVG container and append axes\n      const svg = d3.select(\"#chart\")\n        .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n          .attr(\"transform\", `translate(${margin.left},${margin.top})}`);\n\n      svg.append(\"text\")\n       .attr(\"class\", \"chart-title\")\n       .attr(\"x\", width / 2)\n       .attr(\"y\", 0 - (margin.top / 2))\n       .text(\"AAPL Stock Price Over Time\");\n\n      // Create bars based on data\n      const bars = svg.selectAll(\".bar\")\n        .data(parsedData)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", d => xScale(d.date))\n        .attr(\"y\", 0)\n        .attr(\"width\", d => width)\n        .attr(\"height\", d => height - yScale(d.price))\n        .text(d => d.price.toString());\n\n      // Add labels on top of bars\n      bars.selectAll(\".bar-label\")\n        .data(parsedData)\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .attr(\"x\", d => xScale(d.date) + 10)\n        .attr(\"y\", d => yScale(d.price) + 10)\n        .text(d => d.price.toString());\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      // Display error message in the chart area\n       svg.append(\"text\")\n         .attr(\"x\", width / 2)\n         .attr(\"y\", height / 2)\n         .attr(\"text-anchor\", \"middle\")\n         .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```\n\n**data.csv** (remains the same)\n\n```csv\ndate,symbol,price\n2000-01-01,AAPL,100\n2000-02-01,AAPL,120\n2000-03-01,AAPL,115\n2000-04-01,AAPL,140\n2000-05-01,AAPL,135\n2000-06-01,AAPL,160\n2000-07-01,AAPL,165\n2000-08-01,AAPL,170\n2000-09-01,AAPL,155\n2000-10-01,AAPL,180\n2000-11-01,AAPL,190\n2000-12-01,AAPL,200\n```","message":{"type":"ai","data":{"content":"Here is the updated code:\n\n**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    /* Add basic CSS styling for the chart, axes, labels, title */\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    // Set up SVG dimensions and margins\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    // Load data from data.csv using d3.csv\n    d3.csv(\"data.csv\").then(data => {\n      console.log(\"Data loaded:\", data); // Log loaded data\n\n      // Parse data (dates and prices)\n      const parsedData = data.map(d => ({ date: new Date(d.date), price: parseFloat(d.price) }));\n\n      // Create scales (X: time, Y: linear)\n      const xScale = d3.scaleTime();\n      const yScale = d3.scaleLinear().domain([d3.min(parsedData, d => d.price), d3.max(parsedData, d => d.price)]).range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n\n      // Create SVG container and append axes\n      const svg = d3.select(\"#chart\")\n        .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n          .attr(\"transform\", `translate(${margin.left},${margin.top})}`);\n\n      svg.append(\"text\")\n       .attr(\"class\", \"chart-title\")\n       .attr(\"x\", width / 2)\n       .attr(\"y\", 0 - (margin.top / 2))\n       .text(\"AAPL Stock Price Over Time\");\n\n      // Create bars based on data\n      const bars = svg.selectAll(\".bar\")\n        .data(parsedData)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", d => xScale(d.date))\n        .attr(\"y\", 0)\n        .attr(\"width\", d => width)\n        .attr(\"height\", d => height - yScale(d.price))\n        .text(d => d.price.toString());\n\n      // Add labels on top of bars\n      bars.selectAll(\".bar-label\")\n        .data(parsedData)\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .attr(\"x\", d => xScale(d.date) + 10)\n        .attr(\"y\", d => yScale(d.price) + 10)\n        .text(d => d.price.toString());\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      // Display error message in the chart area\n       svg.append(\"text\")\n         .attr(\"x\", width / 2)\n         .attr(\"y\", height / 2)\n         .attr(\"text-anchor\", \"middle\")\n         .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```\n\n**data.csv** (remains the same)\n\n```csv\ndate,symbol,price\n2000-01-01,AAPL,100\n2000-02-01,AAPL,120\n2000-03-01,AAPL,115\n2000-04-01,AAPL,140\n2000-05-01,AAPL,135\n2000-06-01,AAPL,160\n2000-07-01,AAPL,165\n2000-08-01,AAPL,170\n2000-09-01,AAPL,155\n2000-10-01,AAPL,180\n2000-11-01,AAPL,190\n2000-12-01,AAPL,200\n```","additional_kwargs":{},"response_metadata":{"tokenUsage":{"promptTokens":1294,"completionTokens":992,"totalTokens":2286},"finish_reason":"stop","model_name":"meta-llama/llama-3.2-3b-instruct"},"id":"gen-1748443686-LbJmKd2nqp2h4mEf1LTT","tool_calls":[],"invalid_tool_calls":[],"usage_metadata":{"output_tokens":992,"input_tokens":1294,"total_tokens":2286,"input_token_details":{},"output_token_details":{}}}}}]