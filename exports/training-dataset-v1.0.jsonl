{"prompt":"**index.html**","chosen":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","rejected":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: white; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Implement parsing, scales, axes, bars, labels, title here...\n    d3.csv(\"data.csv\").then(data => {\n      console.log(\"Data loaded:\", data);\n\n      // Parse dates\n      data.forEach(d => {\n        d.date = new Date(d.date);\n        d.price = +d.price;\n      });\n\n      // Create scales\n      const x = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(x)\n        .ticks(d3.timeMonth.every(1)); // Example: Show a tick for each month\n\n      const yAxis = d3.axisLeft(y)\n        .ticks(10); // Example: Show 10 ticks\n\n      // Append axes\n      svg.append(\"g\")\n        .attr(\"class\", \"axis x-axis\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(xAxis);\n\n      svg.append(\"g\")\n        .attr(\"class\", \"axis y-axis\")\n        .call(yAxis);\n\n      // Create bars\n      svg.selectAll(\".bar\")\n        .data(data)\n        .join(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", d => x(d.date))\n          .attr(\"y\", d => y(d.price))\n          .attr(\"width\", width / data.length - 2)\n          .attr(\"height\", d => height - y(d.price));\n\n      // Add bars labels\n      svg.selectAll(\".bar-label\")\n        .data(data)\n        .join(\"text\")\n          .attr(\"class\", \"bar-label\")\n          .attr(\"x\", d => x(d.date) + (width / data.length - 2) / 2)\n          .attr(\"y\", d => y(d.price) - 3)\n          .text(d => d.price);\n\n      // Add a title\n      svg.append(\"text\")\n         .attr(\"class\", \"chart-title\")\n         .attr(\"x\", width / 2)\n         .attr(\"y\", 0 - (margin.top / 2))\n         .text(\"AAPL Stock Price Over Time\");\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      // Display error message in the chart area\n       svg.append(\"text\")\n         .attr(\"x\", width / 2)\n         .attr(\"y\", height / 2)\n         .attr(\"text-anchor\", \"middle\")\n         .text(\"Error loading data. Check console.\");\n    });\n\n  </script>\n</body>\n</html>\n```","metadata":{"challenge":"stockPriceChart","chosen_model":"qwen/qwq-32b","rejected_model":"qwen/qwen-2.5-coder-32b-instruct","chosen_scores":{"technical":5,"aesthetic":5,"overall":5,"vote_count":1},"rejected_scores":{"technical":5,"aesthetic":4,"overall":4.5,"vote_count":1},"score_difference":0.5,"dataset_version":"1.0.0","generated_at":"2025-06-03T17:30:07.636Z"}}
{"prompt":"**index.html**","chosen":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","rejected":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>AAPL Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { \n      font-family: Arial, sans-serif; \n      display: flex; \n      justify-content: center; \n      align-items: center; \n      height: 100vh; \n      margin: 0; \n      background-color: #f4f4f4; \n    }\n    .bar { \n      fill: steelblue; \n      transition: fill 0.3s ease; \n    }\n    .bar:hover { \n      fill: orange; \n    }\n    .bar-label { \n      fill: black; \n      text-anchor: middle; \n      font-size: 10px; \n    }\n    .axis path, \n    .axis line { \n      fill: none; \n      stroke: #000; \n      shape-rendering: crispEdges; \n    }\n    .axis text { \n      font-size: 11px; \n    }\n    .chart-title { \n      font-size: 16px; \n      font-weight: bold; \n      text-anchor: middle; \n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    // Main D3 visualization function\n    function createStockPriceChart(selection, { \n      data, \n      width = 800, \n      height = 600, \n      margin = { top: 40, right: 30, bottom: 40, left: 60 } \n    }) {\n      // Calculate inner chart dimensions\n      const innerWidth = width - margin.left - margin.right;\n      const innerHeight = height - margin.top - margin.bottom;\n\n      // Create SVG container\n      const svg = selection\n        .append(\"svg\")\n          .attr(\"width\", width)\n          .attr(\"height\", height)\n        .append(\"g\")\n          .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n      // Parse dates and prices\n      const parseDate = d3.timeParse(\"%Y-%m-%d\");\n      data = data.map(d => ({\n        ...d,\n        date: parseDate(d.date),\n        price: +d.price\n      }));\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, innerWidth]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .range([innerHeight, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n        .ticks(d3.timeMonth.every(2))\n        .tickFormat(d3.timeFormat(\"%b %Y\"));\n\n      const yAxis = d3.axisLeft(yScale)\n        .tickFormat(d3.format(\"$~f\"));\n\n      // Append X-axis\n      svg.append(\"g\")\n        .attr(\"class\", \"axis x-axis\")\n        .attr(\"transform\", `translate(0,${innerHeight})`)\n        .call(xAxis)\n        .selectAll(\"text\")\n          .attr(\"transform\", \"rotate(-45)\")\n          .style(\"text-anchor\", \"end\");\n\n      // Append Y-axis\n      svg.append(\"g\")\n        .attr(\"class\", \"axis y-axis\")\n        .call(yAxis);\n\n      // Add Y-axis label\n      svg.append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 0 - margin.left)\n        .attr(\"x\", 0 - (innerHeight / 2))\n        .attr(\"dy\", \"1em\")\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Stock Price ($)\");\n\n      // Add X-axis label\n      svg.append(\"text\")\n        .attr(\"x\", innerWidth / 2)\n        .attr(\"y\", innerHeight + margin.bottom)\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Date\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", d => xScale(d.date))\n          .attr(\"width\", innerWidth / data.length * 0.8)\n          .attr(\"y\", d => yScale(d.price))\n          .attr(\"height\", d => innerHeight - yScale(d.price));\n\n      // Add price labels\n      svg.selectAll(\".bar-label\")\n        .data(data)\n        .enter()\n        .append(\"text\")\n          .attr(\"class\", \"bar-label\")\n          .attr(\"x\", d => xScale(d.date) + (innerWidth / data.length * 0.4))\n          .attr(\"y\", d => yScale(d.price) - 5)\n          .text(d => `$${d.price}`);\n\n      // Add title\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", innerWidth / 2)\n        .attr(\"y\", 0 - margin.top / 2)\n        .text(\"AAPL Stock Price Over Time\");\n    }\n\n    // Load and render the chart\n    d3.csv(\"data.csv\").then(data => {\n      createStockPriceChart(d3.select(\"#chart\"), { data });\n    }).catch(error => {\n      console.error(\"Error loading the data:\", error);\n      d3.select(\"#chart\")\n        .append(\"div\")\n        .style(\"color\", \"red\")\n        .text(\"Error loading data\");\n    });\n  </script>\n</body>\n</html>\n```","metadata":{"challenge":"stockPriceChart","chosen_model":"qwen/qwq-32b","rejected_model":"anthropic/claude-3.5-haiku","chosen_scores":{"technical":5,"aesthetic":5,"overall":5,"vote_count":1},"rejected_scores":{"technical":5,"aesthetic":4,"overall":4.5,"vote_count":1},"score_difference":0.5,"dataset_version":"1.0.0","generated_at":"2025-06-03T17:30:07.637Z"}}
{"prompt":"**index.html**","chosen":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","rejected":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size:10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size:11px; }\n    .chart-title { font-size:16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top:40, right:30, bottom:40, left:60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\", d => ({\n      date: new Date(d.date),\n      price: +d.price\n    })).then(data => {\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price) * 1.1])\n        .range([height, 0]);\n\n      const xAxis = d3.axisBottom(xScale)\n        .ticks(d3.timeMonth.every(3));\n\n      const yAxis = d3.axisLeft(yScale);\n\n      svg.append(\"g\")\n        .attr(\"class\", \"axis\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(xAxis)\n        .append(\"text\")\n        .attr(\"fill\", \"#000\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 30)\n        .text(\"Date\");\n\n      svg.append(\"g\")\n        .attr(\"class\", \"axis\")\n        .call(yAxis)\n        .append(\"text\")\n        .attr(\"fill\", \"#000\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"x\", -height / 2)\n        .attr(\"y\", -40)\n        .text(\"Price\");\n\n      svg.selectAll(\".bar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", d => xScale(d.date) - 5)\n        .attr(\"y\", d => yScale(d.price))\n        .attr(\"width\", 10)\n        .attr(\"height\", d => height - yScale(d.price));\n\n      svg.selectAll(\".bar-label\")\n        .data(data)\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .attr(\"x\", d => xScale(d.date))\n        .attr(\"y\", d => yScale(d.price) - 3)\n        .text(d => d.price);\n\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 0 - (margin.top / 2))\n        .text(\"AAPL Stock Price Over Time\");\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","metadata":{"challenge":"stockPriceChart","chosen_model":"qwen/qwq-32b","rejected_model":"meta-llama/llama-4-maverick","chosen_scores":{"technical":5,"aesthetic":5,"overall":5,"vote_count":1},"rejected_scores":{"technical":4,"aesthetic":4,"overall":4,"vote_count":1},"score_difference":1,"dataset_version":"1.0.0","generated_at":"2025-06-03T17:30:07.637Z"}}
{"prompt":"**index.html**","chosen":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","rejected":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = { top: 40, right: 30, bottom: 40, left: 60 };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse the date and price\n      const parsedData = data.map(d => ({\n        date: new Date(d.date),\n        symbol: d.symbol,\n        price: +d.price\n      }));\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(parsedData, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(parsedData, d => d.price)])\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n\n      svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(xAxis)\n        .append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 40)\n        .text(\"Date\");\n\n      svg.append(\"g\")\n        .call(yAxis)\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -height / 2)\n        .text(\"Price\");\n\n      // Create bars\n      svg.selectAll(\".bar\")\n        .data(parsedData)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", d => xScale(d.date))\n        .attr(\"y\", d => yScale(d.price))\n        .attr(\"width\", width / parsedData.length)\n        .attr(\"height\", d => height - yScale(d.price));\n\n      // Add labels on top of bars\n      svg.selectAll(\".bar-label\")\n        .data(parsedData)\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .attr(\"x\", d => xScale(d.date) + (width / parsedData.length) / 2)\n        .attr(\"y\", d => yScale(d.price) - 5)\n        .text(d => d.price);\n\n      // Add a title\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 0 - (margin.top / 2))\n        .text(\"AAPL Stock Price Over Time\");\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","metadata":{"challenge":"stockPriceChart","chosen_model":"qwen/qwq-32b","rejected_model":"qwen/qwen-2.5-72b-instruct","chosen_scores":{"technical":5,"aesthetic":5,"overall":5,"vote_count":1},"rejected_scores":{"technical":4,"aesthetic":4,"overall":4,"vote_count":1},"score_difference":1,"dataset_version":"1.0.0","generated_at":"2025-06-03T17:30:07.638Z"}}
{"prompt":"**index.html**","chosen":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","rejected":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label { font-size: 12px; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse dates and convert prices to numbers\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n      data.sort((a, b) => a.date - b.date);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .range([height, 0]);\n\n      // Calculate bar width\n      let barWidth = 20;\n      if (data.length >= 2) {\n        const interval = data[1].date - data[0].date;\n        barWidth = (xScale(d3.timeMonth.offset(data[0].date, 1)) - xScale(data[0].date)) * 0.8;\n      }\n\n      // Draw bars\n      svg.selectAll(\".bar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", d => xScale(d.date) - barWidth/2)\n        .attr(\"y\", d => yScale(d.price))\n        .attr(\"width\", barWidth)\n        .attr(\"height\", d => height - yScale(d.price));\n\n      // Add price labels\n      svg.selectAll(\".bar-label\")\n        .data(data)\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .text(d => d.price)\n        .attr(\"x\", d => xScale(d.date))\n        .attr(\"y\", d => yScale(d.price) - 5)\n        .attr(\"text-anchor\", \"middle\");\n\n      // Add axes\n      svg.append(\"g\")\n        .attr(\"class\", \"x-axis\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%b %Y\")));\n\n      svg.append(\"g\")\n        .attr(\"class\", \"y-axis\")\n        .call(d3.axisLeft(yScale));\n\n      // Add axis labels\n      svg.append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", height + margin.bottom - 10)\n        .text(\"Date\");\n\n      svg.append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"x\", -height/2)\n        .attr(\"y\", -margin.left + 20)\n        .text(\"Price ($)\");\n\n      // Add chart title\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", -margin.top/2)\n        .text(\"AAPL Stock Price Over Time\");\n\n    }).catch(error => {\n      console.error(\"Error loading data:\", error);\n      svg.append(\"text\")\n        .attr(\"x\", width/2)\n        .attr(\"y\", height/2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","metadata":{"challenge":"stockPriceChart","chosen_model":"qwen/qwq-32b","rejected_model":"deepseek/deepseek-r1","chosen_scores":{"technical":5,"aesthetic":5,"overall":5,"vote_count":1},"rejected_scores":{"technical":4,"aesthetic":3,"overall":3.5,"vote_count":1},"score_difference":1.5,"dataset_version":"1.0.0","generated_at":"2025-06-03T17:30:07.638Z"}}
{"prompt":"**index.html**","chosen":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","rejected":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar:hover { fill: orange; }\n    .bar-label { \n      fill: black; \n      text-anchor: middle; \n      font-size: 10px; \n      font-weight: bold;\n    }\n    .axis path, .axis line { \n      fill: none; \n      stroke: #333; \n      shape-rendering: crispEdges; \n    }\n    .axis text { \n      font-size: 11px; \n      fill: #333;\n    }\n    .chart-title { \n      font-size: 18px; \n      font-weight: bold; \n      text-anchor: middle;\n    }\n    .axis-label {\n      font-size: 12px;\n      font-weight: bold;\n      text-anchor: middle;\n    }\n    #chart {\n      width: 800px;\n      height: 600px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 50, right: 30, bottom: 50, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse the data\n      const parseDate = d3.timeParse(\"%Y-%m-%d\");\n      data.forEach(d => {\n        d.date = parseDate(d.date);\n        d.price = +d.price;\n      });\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width])\n        .nice();\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price) * 1.1])\n        .range([height, 0])\n        .nice();\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n        .tickFormat(d3.timeFormat(\"%b %Y\"))\n        .ticks(d3.timeMonth.every(2));\n\n      const yAxis = d3.axisLeft(yScale)\n        .tickFormat(d => `$${d}`);\n\n      // Add axes to SVG\n      svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(xAxis);\n\n      svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(yAxis);\n\n      // Add axis labels\n      svg.append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height + margin.bottom - 10)\n        .text(\"Date\");\n\n      svg.append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"x\", -height / 2)\n        .attr(\"y\", -margin.left + 15)\n        .text(\"Price ($)\");\n\n      // Create bars\n      const barWidth = width / data.length * 0.7;\n\n      svg.selectAll(\".bar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", d => xScale(d.date) - barWidth/2)\n          .attr(\"y\", d => yScale(d.price))\n          .attr(\"width\", barWidth)\n          .attr(\"height\", d => height - yScale(d.price))\n          .attr(\"rx\", 2)\n          .attr(\"ry\", 2);\n\n      // Add price labels on top of bars\n      svg.selectAll(\".bar-label\")\n        .data(data)\n        .enter()\n        .append(\"text\")\n          .attr(\"class\", \"bar-label\")\n          .attr(\"x\", d => xScale(d.date))\n          .attr(\"y\", d => yScale(d.price) - 5)\n          .text(d => `$${d.price}`);\n\n      // Add chart title\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 0 - (margin.top / 2))\n        .text(\"AAPL Stock Price Over Time\");\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","metadata":{"challenge":"stockPriceChart","chosen_model":"qwen/qwq-32b","rejected_model":"deepseek/deepseek-chat","chosen_scores":{"technical":5,"aesthetic":5,"overall":5,"vote_count":1},"rejected_scores":{"technical":4,"aesthetic":3,"overall":3.5,"vote_count":1},"score_difference":1.5,"dataset_version":"1.0.0","generated_at":"2025-06-03T17:30:07.639Z"}}
{"prompt":"**index.html**","chosen":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","rejected":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar:hover { fill: orange; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label { font-size: 12px; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script>\n    const margin = {top: 60, right: 30, bottom: 60, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse the data\n      const parseTime = d3.timeParse(\"%Y-%m-%d\");\n      data.forEach(d => {\n        d.date = parseTime(d.date);\n        d.price = +d.price;\n      });\n\n      // Set the scales\n      const x = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price) * 1.1])\n        .range([height, 0]);\n\n      // Add the axes\n      svg.append(\"g\")\n        .attr(\"class\", \"axis axis--x\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(d3.axisBottom(x));\n\n      svg.append(\"g\")\n        .attr(\"class\", \"axis axis--y\")\n        .call(d3.axisLeft(y));\n\n      // Add axis labels\n      svg.append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height + margin.bottom - 10)\n        .text(\"Date\");\n\n      svg.append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"x\", -height / 2)\n        .attr(\"y\", -margin.left + 20)\n        .text(\"Price ($)\");\n\n      // Add chart title\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 0 - (margin.top / 2))\n        .text(\"AAPL Stock Price Over Time\");\n\n      // Create bars\n      const barWidth = width / data.length * 0.7;\n      \n      svg.selectAll(\".bar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", d => x(d.date) - barWidth/2)\n          .attr(\"y\", d => y(d.price))\n          .attr(\"width\", barWidth)\n          .attr(\"height\", d => height - y(d.price));\n\n      // Add price labels\n      svg.selectAll(\".bar-label\")\n        .data(data)\n        .enter()\n        .append(\"text\")\n          .attr(\"class\", \"bar-label\")\n          .attr(\"x\", d => x(d.date))\n          .attr(\"y\", d => y(d.price) - 5)\n          .text(d => d.price);\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","metadata":{"challenge":"stockPriceChart","chosen_model":"qwen/qwq-32b","rejected_model":"deepseek/deepseek-chat-v3-0324","chosen_scores":{"technical":5,"aesthetic":5,"overall":5,"vote_count":1},"rejected_scores":{"technical":4,"aesthetic":3,"overall":3.5,"vote_count":1},"score_difference":1.5,"dataset_version":"1.0.0","generated_at":"2025-06-03T17:30:07.639Z"}}
{"prompt":"**index.html**","chosen":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","rejected":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>AAPL Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: white; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\", d3.autoType).then(data => {\n      console.log(\"Data loaded:\", data);\n\n      // Scales\n      const x = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Axes\n      const xAxis = d3.axisBottom(x);\n      const yAxis = d3.axisLeft(y);\n\n      svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .attr(\"class\", \"axis\")\n        .call(xAxis);\n\n      svg.append(\"g\")\n        .attr(\"class\", \"axis\")\n        .call(yAxis);\n\n      // Bars\n      svg.selectAll(\".bar\")\n        .data(data)\n        .enter().append(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", d => x(d.date))\n          .attr(\"width\", width / data.length - 1)\n          .attr(\"y\", d => y(d.price))\n          .attr(\"height\", d => height - y(d.price));\n\n      // Bar labels\n      svg.selectAll(\".bar-label\")\n        .data(data)\n        .enter().append(\"text\")\n          .attr(\"class\", \"bar-label\")\n          .attr(\"x\", d => x(d.date) + (width / data.length - 1) / 2)\n          .attr(\"y\", d => y(d.price) - 5)\n          .text(d => d.price)\n          .style(\"fill\", d => { return (d.price > 175) ? 'white':'black';});\n\n      // Title\n      svg.append(\"text\")\n         .attr(\"class\", \"chart-title\")\n         .attr(\"x\", width / 2)\n         .attr(\"y\", 0 - (margin.top / 2))\n         .text(\"AAPL Stock Price Over Time\");\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n       svg.append(\"text\")\n         .attr(\"x\", width / 2)\n         .attr(\"y\", height / 2)\n         .attr(\"text-anchor\", \"middle\")\n         .text(\"Error loading data. Check console.\");\n    });\n\n  </script>\n</body>\n</html>\n```","metadata":{"challenge":"stockPriceChart","chosen_model":"qwen/qwq-32b","rejected_model":"google/gemini-2.0-flash-001","chosen_scores":{"technical":5,"aesthetic":5,"overall":5,"vote_count":1},"rejected_scores":{"technical":4,"aesthetic":3,"overall":3.5,"vote_count":1},"score_difference":1.5,"dataset_version":"1.0.0","generated_at":"2025-06-03T17:30:07.640Z"}}
{"prompt":"**index.html**","chosen":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","rejected":"**index.html**\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    /* Add basic CSS styling for the chart, axes, labels, title */\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    // Set up SVG dimensions and margins\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    // Load data from data.csv using d3.csv\n    d3.csv(\"data.csv\").then(data => {\n      console.log(\"Data loaded:\", data); // Log loaded data\n\n      // Parse data (dates and prices)\n      const parsedData = data.map(d => ({ date: new Date(d.date), price: parseFloat(d.price) }));\n\n      // Create scales (X: time, Y: linear)\n      const xScale = d3.scaleTime();\n      const yScale = d3.scaleLinear().domain([d3.min(parsedData, d => d.price), d3.max(parsedData, d => d.price)]).range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n\n      // Create SVG container and append axes\n      const svg = d3.select(\"#chart\")\n        .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n          .attr(\"transform\", `translate(${margin.left},${margin.top})}`);\n\n      svg.append(\"text\")\n       .attr(\"class\", \"chart-title\")\n       .attr(\"x\", width / 2)\n       .attr(\"y\", 0 - (margin.top / 2))\n       .text(\"AAPL Stock Price Over Time\");\n\n      // Create bars based on data\n      const bars = svg.selectAll(\".bar\")\n        .data(parsedData)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", d => xScale(d.date))\n        .attr(\"y\", 0)\n        .attr(\"width\", d => width)\n        .attr(\"height\", d => height - yScale(d.price))\n        .text(d => d.price.toString());\n\n      // Add labels on top of bars\n      bars.selectAll(\".bar-label\")\n        .data(parsedData)\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .attr(\"x\", d => xScale(d.date) + 10)\n        .attr(\"y\", d => yScale(d.price) + 10)\n        .text(d => d.price.toString());\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      // Display error message in the chart area\n       svg.append(\"text\")\n         .attr(\"x\", width / 2)\n         .attr(\"y\", height / 2)\n         .attr(\"text-anchor\", \"middle\")\n         .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","metadata":{"challenge":"stockPriceChart","chosen_model":"qwen/qwq-32b","rejected_model":"meta-llama/llama-3.2-3b-instruct","chosen_scores":{"technical":5,"aesthetic":5,"overall":5,"vote_count":1},"rejected_scores":{"technical":2,"aesthetic":1,"overall":1.5,"vote_count":1},"score_difference":3.5,"dataset_version":"1.0.0","generated_at":"2025-06-03T17:30:07.640Z"}}