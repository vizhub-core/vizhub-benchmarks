[{"text":"**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","message":{"type":"ai","data":{"content":"**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n    .axis-label {\n      font-weight: bold;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse data\n      data.forEach(d => {\n        d.date = d3.timeParse(\"%Y-%m-%d\")(d.date);\n        d.price = +d.price;\n      });\n\n      // Calculate bar width\n      const barWidth = Math.floor(width / data.length);\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(data, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.price)])\n        .nice()\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale)\n          .ticks(d3.timeMonth.every(1))\n          .tickFormat(d3.timeFormat(\"%b\"));\n\n      const yAxis = d3.axisLeft(yScale)\n          .ticks(5);\n\n      // Append axes\n      svg.append(\"g\")\n          .attr(\"class\", \"axis x-axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(xAxis);\n\n      svg.append(\"g\")\n          .attr(\"class\", \"axis y-axis\")\n          .call(yAxis);\n\n      // Append axis labels\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"x\", width/2)\n          .attr(\"y\", height + margin.bottom + 10)\n          .text(\"Date\");\n\n      svg.append(\"text\")\n          .attr(\"class\", \"axis-label\")\n          .attr(\"transform\", `translate(-${margin.left}, ${height / 2}) rotate(-90)`)\n          .text(\"Price ($)\");\n\n      // Create bars\n      const bars = svg.selectAll(\".bar\")\n          .data(data)\n          .join(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", d => xScale(d.date) - barWidth / 2)\n            .attr(\"y\", d => yScale(d.price))\n            .attr(\"width\", barWidth)\n            .attr(\"height\", d => height - yScale(d.price));\n\n      // Create labels on bars\n      const labels = svg.selectAll(\".bar-label\")\n          .data(data)\n          .join(\"text\")\n            .attr(\"class\", \"bar-label\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(d.price) - 5)\n            .text(d => d.price)\n            .attr(\"text-anchor\", \"middle\");\n\n      // Add title\n      svg.select(\".chart-title\").remove();\n      svg.append(\"text\")\n          .attr(\"class\", \"chart-title\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", -margin.top / 2)\n          .text(\"AAPL Stock Price Over Time\");\n\n      // Cleanup placeholder elements\n      svg.select(\"rect\").remove();\n      svg.selectAll(\".chart-title\").filter(d => \n        String(svg.select(\".chart-title\").text()).includes(\"Implementation\")\n      ).remove();\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"class\", \"error-text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```","additional_kwargs":{},"response_metadata":{"tokenUsage":{"promptTokens":1386,"completionTokens":9952,"totalTokens":11338},"finish_reason":"stop","model_name":"qwen/qwq-32b"},"id":"gen-1748443445-MX7R3MDVtRr5mpmLhLlt","tool_calls":[],"invalid_tool_calls":[],"usage_metadata":{"output_tokens":9952,"input_tokens":1386,"total_tokens":11338,"input_token_details":{},"output_token_details":{}}}}}]