[{"text":"**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      const parsedData = data.map(d => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n        price: +d.price\n      }));\n\n      const x = d3.scaleTime()\n        .domain(d3.extent(parsedData, d => d.date))\n        .range([0, width]);\n\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(parsedData, d => d.price)])\n        .range([height, 0]);\n\n      const xAxis = g => g\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));\n\n      const yAxis = g => g\n        .call(d3.axisLeft(y));\n\n      svg.append(\"g\")\n        .call(xAxis)\n        .append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height + 20)\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Date\");\n\n      svg.append(\"g\")\n        .call(yAxis)\n        .append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 0 - margin.left)\n        .attr(\"x\", 0 - (height / 2))\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Price\");\n\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 0 - (margin.top / 2))\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"AAPL Stock Price Over Time\");\n\n      const bar = svg.selectAll(\".bar\")\n        .data(parsedData)\n        .join(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", d => x(d.date))\n          .attr(\"width\", x.bandwidth())\n          .attr(\"y\", d => y(d.price))\n          .attr(\"height\", d => height - y(d.price));\n\n      bar.append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .attr(\"x\", d => x(d.date) + x.bandwidth() / 2)\n        .attr(\"y\", d => y(d.price) - 4)\n        .attr(\"text-anchor\", \"middle\")\n        .text(d => d.price);\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n\n  </script>\n</body>\n</html>\n```\n\n**data.csv**\n\n```\ndate,symbol,price\n2000-01-01,AAPL,100\n2000-02-01,AAPL,120\n2000-03-01,AAPL,115\n2000-04-01,AAPL,140\n2000-05-01,AAPL,135\n2000-06-01,AAPL,160\n2000-07-01,AAPL,165\n2000-08-01,AAPL,170\n2000-09-01,AAPL,155\n2000-10-01,AAPL,180\n2000-11-01,AAPL,190\n2000-12-01,AAPL,200\n```\n\nIn this implementation, we have:\n1. Loaded the data from `data.csv`.\n2. Parsed the dates and prices.\n3. Created time and linear scales for the X and Y axes.\n4. Added the X and Y axes with appropriate labels.\n5. Added a title to the chart.\n6. Rendered bars based on the data.\n7. Added labels on top of each bar.\n8. Ensured the visualization fits within an 800x600 viewport.\n9. Added basic styling for the chart, bars, and axes.","message":{"type":"ai","data":{"content":"**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = {top: 40, right: 30, bottom: 40, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      const parsedData = data.map(d => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n        price: +d.price\n      }));\n\n      const x = d3.scaleTime()\n        .domain(d3.extent(parsedData, d => d.date))\n        .range([0, width]);\n\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(parsedData, d => d.price)])\n        .range([height, 0]);\n\n      const xAxis = g => g\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));\n\n      const yAxis = g => g\n        .call(d3.axisLeft(y));\n\n      svg.append(\"g\")\n        .call(xAxis)\n        .append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height + 20)\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Date\");\n\n      svg.append(\"g\")\n        .call(yAxis)\n        .append(\"text\")\n        .attr(\"class\", \"axis-label\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 0 - margin.left)\n        .attr(\"x\", 0 - (height / 2))\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Price\");\n\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 0 - (margin.top / 2))\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"AAPL Stock Price Over Time\");\n\n      const bar = svg.selectAll(\".bar\")\n        .data(parsedData)\n        .join(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", d => x(d.date))\n          .attr(\"width\", x.bandwidth())\n          .attr(\"y\", d => y(d.price))\n          .attr(\"height\", d => height - y(d.price));\n\n      bar.append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .attr(\"x\", d => x(d.date) + x.bandwidth() / 2)\n        .attr(\"y\", d => y(d.price) - 4)\n        .attr(\"text-anchor\", \"middle\")\n        .text(d => d.price);\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n\n  </script>\n</body>\n</html>\n```\n\n**data.csv**\n\n```\ndate,symbol,price\n2000-01-01,AAPL,100\n2000-02-01,AAPL,120\n2000-03-01,AAPL,115\n2000-04-01,AAPL,140\n2000-05-01,AAPL,135\n2000-06-01,AAPL,160\n2000-07-01,AAPL,165\n2000-08-01,AAPL,170\n2000-09-01,AAPL,155\n2000-10-01,AAPL,180\n2000-11-01,AAPL,190\n2000-12-01,AAPL,200\n```\n\nIn this implementation, we have:\n1. Loaded the data from `data.csv`.\n2. Parsed the dates and prices.\n3. Created time and linear scales for the X and Y axes.\n4. Added the X and Y axes with appropriate labels.\n5. Added a title to the chart.\n6. Rendered bars based on the data.\n7. Added labels on top of each bar.\n8. Ensured the visualization fits within an 800x600 viewport.\n9. Added basic styling for the chart, bars, and axes.","additional_kwargs":{},"response_metadata":{"tokenUsage":{"promptTokens":1432,"completionTokens":1365,"totalTokens":2797},"finish_reason":"stop","model_name":"amazon/nova-micro-v1"},"id":"gen-1748443652-utshW6w4yBqKBZyl1Vfn","tool_calls":[],"invalid_tool_calls":[],"usage_metadata":{"output_tokens":1365,"input_tokens":1432,"total_tokens":2797,"input_token_details":{},"output_token_details":{}}}}}]