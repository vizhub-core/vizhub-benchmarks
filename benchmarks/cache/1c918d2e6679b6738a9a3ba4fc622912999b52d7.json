[{"text":"**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = { top: 40, right: 30, bottom: 40, left: 60 };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse the date and price\n      const parsedData = data.map(d => ({\n        date: new Date(d.date),\n        symbol: d.symbol,\n        price: +d.price\n      }));\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(parsedData, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(parsedData, d => d.price)])\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n\n      svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(xAxis)\n        .append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 40)\n        .text(\"Date\");\n\n      svg.append(\"g\")\n        .call(yAxis)\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -height / 2)\n        .text(\"Price\");\n\n      // Create bars\n      svg.selectAll(\".bar\")\n        .data(parsedData)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", d => xScale(d.date))\n        .attr(\"y\", d => yScale(d.price))\n        .attr(\"width\", width / parsedData.length)\n        .attr(\"height\", d => height - yScale(d.price));\n\n      // Add labels on top of bars\n      svg.selectAll(\".bar-label\")\n        .data(parsedData)\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .attr(\"x\", d => xScale(d.date) + (width / parsedData.length) / 2)\n        .attr(\"y\", d => yScale(d.price) - 5)\n        .text(d => d.price);\n\n      // Add a title\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 0 - (margin.top / 2))\n        .text(\"AAPL Stock Price Over Time\");\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```\n\n**data.csv**\n\n```\ndate,symbol,price\n2000-01-01,AAPL,100\n2000-02-01,AAPL,120\n2000-03-01,AAPL,115\n2000-04-01,AAPL,140\n2000-05-01,AAPL,135\n2000-06-01,AAPL,160\n2000-07-01,AAPL,165\n2000-08-01,AAPL,170\n2000-09-01,AAPL,155\n2000-10-01,AAPL,180\n2000-11-01,AAPL,190\n2000-12-01,AAPL,200\n```\n\nThis implementation completes the task by:\n1. Setting up the SVG dimensions and margins.\n2. Loading data from `data.csv` and parsing it.\n3. Creating time and linear scales for the X and Y axes.\n4. Creating and appending the axes to the SVG.\n5. Creating bars based on the parsed data.\n6. Adding labels on top of each bar.\n7. Adding a title to the chart.\n8. Ensuring the chart fits within an 800x600 viewport.\n9. Adding basic styling for the chart, axes, labels, and title.","message":{"type":"ai","data":{"content":"**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Stock Price Visualization</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; }\n    .bar { fill: steelblue; }\n    .bar-label { fill: black; text-anchor: middle; font-size: 10px; }\n    .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; }\n    .axis text { font-size: 11px; }\n    .chart-title { font-size: 16px; font-weight: bold; text-anchor: middle; }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script type=\"module\">\n    const margin = { top: 40, right: 30, bottom: 40, left: 60 };\n    const width = 800 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    d3.csv(\"data.csv\").then(data => {\n      // Parse the date and price\n      const parsedData = data.map(d => ({\n        date: new Date(d.date),\n        symbol: d.symbol,\n        price: +d.price\n      }));\n\n      // Create scales\n      const xScale = d3.scaleTime()\n        .domain(d3.extent(parsedData, d => d.date))\n        .range([0, width]);\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(parsedData, d => d.price)])\n        .range([height, 0]);\n\n      // Create axes\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n\n      svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(xAxis)\n        .append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 40)\n        .text(\"Date\");\n\n      svg.append(\"g\")\n        .call(yAxis)\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -height / 2)\n        .text(\"Price\");\n\n      // Create bars\n      svg.selectAll(\".bar\")\n        .data(parsedData)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", d => xScale(d.date))\n        .attr(\"y\", d => yScale(d.price))\n        .attr(\"width\", width / parsedData.length)\n        .attr(\"height\", d => height - yScale(d.price));\n\n      // Add labels on top of bars\n      svg.selectAll(\".bar-label\")\n        .data(parsedData)\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"bar-label\")\n        .attr(\"x\", d => xScale(d.date) + (width / parsedData.length) / 2)\n        .attr(\"y\", d => yScale(d.price) - 5)\n        .text(d => d.price);\n\n      // Add a title\n      svg.append(\"text\")\n        .attr(\"class\", \"chart-title\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", 0 - (margin.top / 2))\n        .text(\"AAPL Stock Price Over Time\");\n\n    }).catch(error => {\n      console.error(\"Error loading or processing data:\", error);\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error loading data. Check console.\");\n    });\n  </script>\n</body>\n</html>\n```\n\n**data.csv**\n\n```\ndate,symbol,price\n2000-01-01,AAPL,100\n2000-02-01,AAPL,120\n2000-03-01,AAPL,115\n2000-04-01,AAPL,140\n2000-05-01,AAPL,135\n2000-06-01,AAPL,160\n2000-07-01,AAPL,165\n2000-08-01,AAPL,170\n2000-09-01,AAPL,155\n2000-10-01,AAPL,180\n2000-11-01,AAPL,190\n2000-12-01,AAPL,200\n```\n\nThis implementation completes the task by:\n1. Setting up the SVG dimensions and margins.\n2. Loading data from `data.csv` and parsing it.\n3. Creating time and linear scales for the X and Y axes.\n4. Creating and appending the axes to the SVG.\n5. Creating bars based on the parsed data.\n6. Adding labels on top of each bar.\n7. Adding a title to the chart.\n8. Ensuring the chart fits within an 800x600 viewport.\n9. Adding basic styling for the chart, axes, labels, and title.","additional_kwargs":{},"response_metadata":{"tokenUsage":{"promptTokens":1384,"completionTokens":1251,"totalTokens":2635},"finish_reason":"stop","model_name":"qwen/qwen-2.5-72b-instruct"},"id":"gen-1748443660-Z6Tlsbk4nIVW2h7pAWs6","tool_calls":[],"invalid_tool_calls":[],"usage_metadata":{"output_tokens":1251,"input_tokens":1384,"total_tokens":2635,"input_token_details":{},"output_token_details":{}}}}}]